// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.21.12
// source: product/product.proto

package product

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetProductsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProductIds    []string               `protobuf:"bytes,1,rep,name=product_ids,json=productIds,proto3" json:"product_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetProductsRequest) Reset() {
	*x = GetProductsRequest{}
	mi := &file_product_product_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProductsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProductsRequest) ProtoMessage() {}

func (x *GetProductsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_product_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProductsRequest.ProtoReflect.Descriptor instead.
func (*GetProductsRequest) Descriptor() ([]byte, []int) {
	return file_product_product_proto_rawDescGZIP(), []int{0}
}

func (x *GetProductsRequest) GetProductIds() []string {
	if x != nil {
		return x.ProductIds
	}
	return nil
}

type GetProductsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Products      []*MasterProduct       `protobuf:"bytes,1,rep,name=products,proto3" json:"products,omitempty"`
	TotalCount    int32                  `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetProductsResponse) Reset() {
	*x = GetProductsResponse{}
	mi := &file_product_product_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProductsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProductsResponse) ProtoMessage() {}

func (x *GetProductsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_product_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProductsResponse.ProtoReflect.Descriptor instead.
func (*GetProductsResponse) Descriptor() ([]byte, []int) {
	return file_product_product_proto_rawDescGZIP(), []int{1}
}

func (x *GetProductsResponse) GetProducts() []*MasterProduct {
	if x != nil {
		return x.Products
	}
	return nil
}

func (x *GetProductsResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type GetCartProductResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Products      []*CartProduct         `protobuf:"bytes,1,rep,name=products,proto3" json:"products,omitempty"`
	TotalCount    int32                  `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCartProductResponse) Reset() {
	*x = GetCartProductResponse{}
	mi := &file_product_product_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCartProductResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCartProductResponse) ProtoMessage() {}

func (x *GetCartProductResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_product_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCartProductResponse.ProtoReflect.Descriptor instead.
func (*GetCartProductResponse) Descriptor() ([]byte, []int) {
	return file_product_product_proto_rawDescGZIP(), []int{2}
}

func (x *GetCartProductResponse) GetProducts() []*CartProduct {
	if x != nil {
		return x.Products
	}
	return nil
}

func (x *GetCartProductResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type CartProduct struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	KId              string                 `protobuf:"bytes,1,opt,name=K_id,json=KId,proto3" json:"K_id,omitempty"`
	KDisplayName     string                 `protobuf:"bytes,2,opt,name=K_display_name,json=KDisplayName,proto3" json:"K_display_name,omitempty"`
	KDescription     string                 `protobuf:"bytes,3,opt,name=K_description,json=KDescription,proto3" json:"K_description,omitempty"`
	KPreviewImage    string                 `protobuf:"bytes,4,opt,name=K_preview_image,json=KPreviewImage,proto3" json:"K_preview_image,omitempty"`
	KShelfLifeInDays int32                  `protobuf:"varint,5,opt,name=K_shelf_life_in_days,json=KShelfLifeInDays,proto3" json:"K_shelf_life_in_days,omitempty"`
	KDisplayPrice    float64                `protobuf:"fixed64,6,opt,name=K_display_price,json=KDisplayPrice,proto3" json:"K_display_price,omitempty"`
	KPricePerKg      int64                  `protobuf:"varint,7,opt,name=K_price_per_kg,json=KPricePerKg,proto3" json:"K_price_per_kg,omitempty"`
	KRating          float64                `protobuf:"fixed64,8,opt,name=K_rating,json=KRating,proto3" json:"K_rating,omitempty"`
	KProductId       int64                  `protobuf:"varint,9,opt,name=K_product_id,json=KProductId,proto3" json:"K_product_id,omitempty"`
	KCategory        []string               `protobuf:"bytes,10,rep,name=K_category,json=KCategory,proto3" json:"K_category,omitempty"`
	KProtionsGm      []string               `protobuf:"bytes,11,rep,name=K_protions_gm,json=KProtionsGm,proto3" json:"K_protions_gm,omitempty"`
	KVegNonVegTypeId string                 `protobuf:"bytes,12,opt,name=K_veg_non_veg_type_id,json=KVegNonVegTypeId,proto3" json:"K_veg_non_veg_type_id,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CartProduct) Reset() {
	*x = CartProduct{}
	mi := &file_product_product_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CartProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CartProduct) ProtoMessage() {}

func (x *CartProduct) ProtoReflect() protoreflect.Message {
	mi := &file_product_product_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CartProduct.ProtoReflect.Descriptor instead.
func (*CartProduct) Descriptor() ([]byte, []int) {
	return file_product_product_proto_rawDescGZIP(), []int{3}
}

func (x *CartProduct) GetKId() string {
	if x != nil {
		return x.KId
	}
	return ""
}

func (x *CartProduct) GetKDisplayName() string {
	if x != nil {
		return x.KDisplayName
	}
	return ""
}

func (x *CartProduct) GetKDescription() string {
	if x != nil {
		return x.KDescription
	}
	return ""
}

func (x *CartProduct) GetKPreviewImage() string {
	if x != nil {
		return x.KPreviewImage
	}
	return ""
}

func (x *CartProduct) GetKShelfLifeInDays() int32 {
	if x != nil {
		return x.KShelfLifeInDays
	}
	return 0
}

func (x *CartProduct) GetKDisplayPrice() float64 {
	if x != nil {
		return x.KDisplayPrice
	}
	return 0
}

func (x *CartProduct) GetKPricePerKg() int64 {
	if x != nil {
		return x.KPricePerKg
	}
	return 0
}

func (x *CartProduct) GetKRating() float64 {
	if x != nil {
		return x.KRating
	}
	return 0
}

func (x *CartProduct) GetKProductId() int64 {
	if x != nil {
		return x.KProductId
	}
	return 0
}

func (x *CartProduct) GetKCategory() []string {
	if x != nil {
		return x.KCategory
	}
	return nil
}

func (x *CartProduct) GetKProtionsGm() []string {
	if x != nil {
		return x.KProtionsGm
	}
	return nil
}

func (x *CartProduct) GetKVegNonVegTypeId() string {
	if x != nil {
		return x.KVegNonVegTypeId
	}
	return ""
}

type MasterProduct struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	KId              string                 `protobuf:"bytes,1,opt,name=K_id,json=KId,proto3" json:"K_id,omitempty"`
	KProductId       int64                  `protobuf:"varint,2,opt,name=K_product_id,json=KProductId,proto3" json:"K_product_id,omitempty"`
	KVisibility      bool                   `protobuf:"varint,3,opt,name=K_visibility,json=KVisibility,proto3" json:"K_visibility,omitempty"`
	KDisplayName     string                 `protobuf:"bytes,4,opt,name=K_display_name,json=KDisplayName,proto3" json:"K_display_name,omitempty"`
	KDescription     string                 `protobuf:"bytes,5,opt,name=K_description,json=KDescription,proto3" json:"K_description,omitempty"`
	KCategory        []string               `protobuf:"bytes,6,rep,name=K_category,json=KCategory,proto3" json:"K_category,omitempty"`
	KShelfLifeInDays int64                  `protobuf:"varint,7,opt,name=K_shelf_life_in_days,json=KShelfLifeInDays,proto3" json:"K_shelf_life_in_days,omitempty"`
	KVegNonVegTypeId string                 `protobuf:"bytes,8,opt,name=K_veg_non_veg_type_id,json=KVegNonVegTypeId,proto3" json:"K_veg_non_veg_type_id,omitempty"`
	KDisplayPrice    float64                `protobuf:"fixed64,9,opt,name=K_display_price,json=KDisplayPrice,proto3" json:"K_display_price,omitempty"`
	KRate            float64                `protobuf:"fixed64,10,opt,name=K_rate,json=KRate,proto3" json:"K_rate,omitempty"`
	KPricePerKg      float64                `protobuf:"fixed64,11,opt,name=K_price_per_kg,json=KPricePerKg,proto3" json:"K_price_per_kg,omitempty"`
	KAllergyContents string                 `protobuf:"bytes,12,opt,name=K_allergy_contents,json=KAllergyContents,proto3" json:"K_allergy_contents,omitempty"`
	KProtionsGm      []string               `protobuf:"bytes,13,rep,name=K_protions_gm,json=KProtionsGm,proto3" json:"K_protions_gm,omitempty"`
	KPiecesPerKg     int64                  `protobuf:"varint,14,opt,name=K_pieces_per_kg,json=KPiecesPerKg,proto3" json:"K_pieces_per_kg,omitempty"`
	KIngredients     string                 `protobuf:"bytes,15,opt,name=K_ingredients,json=KIngredients,proto3" json:"K_ingredients,omitempty"`
	KRating          float64                `protobuf:"fixed64,16,opt,name=K_rating,json=KRating,proto3" json:"K_rating,omitempty"`
	KViews           int64                  `protobuf:"varint,17,opt,name=K_views,json=KViews,proto3" json:"K_views,omitempty"`
	KTag             string                 `protobuf:"bytes,18,opt,name=K_tag,json=KTag,proto3" json:"K_tag,omitempty"`
	KPreviewImage    string                 `protobuf:"bytes,19,opt,name=K_preview_image,json=KPreviewImage,proto3" json:"K_preview_image,omitempty"`
	KIsAvailable     bool                   `protobuf:"varint,20,opt,name=K_is_available,json=KIsAvailable,proto3" json:"K_is_available,omitempty"`
	KOccasion        []string               `protobuf:"bytes,21,rep,name=K_occasion,json=KOccasion,proto3" json:"K_occasion,omitempty"`
	RW_ProductId     int64                  `protobuf:"varint,22,opt,name=RW_ProductId,json=RWProductId,proto3" json:"RW_ProductId,omitempty"`
	RW_DescForLabel  string                 `protobuf:"bytes,23,opt,name=RW_DescForLabel,json=RWDescForLabel,proto3" json:"RW_DescForLabel,omitempty"`
	RW_DisplayName   string                 `protobuf:"bytes,24,opt,name=RW_DisplayName,json=RWDisplayName,proto3" json:"RW_DisplayName,omitempty"`
	RWProductname    string                 `protobuf:"bytes,25,opt,name=RW_productname,json=RWProductname,proto3" json:"RW_productname,omitempty"`
	CreatedAt        *timestamppb.Timestamp `protobuf:"bytes,26,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt        *timestamppb.Timestamp `protobuf:"bytes,27,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedBy        string                 `protobuf:"bytes,28,opt,name=deleted_by,json=deletedBy,proto3" json:"deleted_by,omitempty"`
	DeletedAt        *timestamppb.Timestamp `protobuf:"bytes,29,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *MasterProduct) Reset() {
	*x = MasterProduct{}
	mi := &file_product_product_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MasterProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MasterProduct) ProtoMessage() {}

func (x *MasterProduct) ProtoReflect() protoreflect.Message {
	mi := &file_product_product_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MasterProduct.ProtoReflect.Descriptor instead.
func (*MasterProduct) Descriptor() ([]byte, []int) {
	return file_product_product_proto_rawDescGZIP(), []int{4}
}

func (x *MasterProduct) GetKId() string {
	if x != nil {
		return x.KId
	}
	return ""
}

func (x *MasterProduct) GetKProductId() int64 {
	if x != nil {
		return x.KProductId
	}
	return 0
}

func (x *MasterProduct) GetKVisibility() bool {
	if x != nil {
		return x.KVisibility
	}
	return false
}

func (x *MasterProduct) GetKDisplayName() string {
	if x != nil {
		return x.KDisplayName
	}
	return ""
}

func (x *MasterProduct) GetKDescription() string {
	if x != nil {
		return x.KDescription
	}
	return ""
}

func (x *MasterProduct) GetKCategory() []string {
	if x != nil {
		return x.KCategory
	}
	return nil
}

func (x *MasterProduct) GetKShelfLifeInDays() int64 {
	if x != nil {
		return x.KShelfLifeInDays
	}
	return 0
}

func (x *MasterProduct) GetKVegNonVegTypeId() string {
	if x != nil {
		return x.KVegNonVegTypeId
	}
	return ""
}

func (x *MasterProduct) GetKDisplayPrice() float64 {
	if x != nil {
		return x.KDisplayPrice
	}
	return 0
}

func (x *MasterProduct) GetKRate() float64 {
	if x != nil {
		return x.KRate
	}
	return 0
}

func (x *MasterProduct) GetKPricePerKg() float64 {
	if x != nil {
		return x.KPricePerKg
	}
	return 0
}

func (x *MasterProduct) GetKAllergyContents() string {
	if x != nil {
		return x.KAllergyContents
	}
	return ""
}

func (x *MasterProduct) GetKProtionsGm() []string {
	if x != nil {
		return x.KProtionsGm
	}
	return nil
}

func (x *MasterProduct) GetKPiecesPerKg() int64 {
	if x != nil {
		return x.KPiecesPerKg
	}
	return 0
}

func (x *MasterProduct) GetKIngredients() string {
	if x != nil {
		return x.KIngredients
	}
	return ""
}

func (x *MasterProduct) GetKRating() float64 {
	if x != nil {
		return x.KRating
	}
	return 0
}

func (x *MasterProduct) GetKViews() int64 {
	if x != nil {
		return x.KViews
	}
	return 0
}

func (x *MasterProduct) GetKTag() string {
	if x != nil {
		return x.KTag
	}
	return ""
}

func (x *MasterProduct) GetKPreviewImage() string {
	if x != nil {
		return x.KPreviewImage
	}
	return ""
}

func (x *MasterProduct) GetKIsAvailable() bool {
	if x != nil {
		return x.KIsAvailable
	}
	return false
}

func (x *MasterProduct) GetKOccasion() []string {
	if x != nil {
		return x.KOccasion
	}
	return nil
}

func (x *MasterProduct) GetRW_ProductId() int64 {
	if x != nil {
		return x.RW_ProductId
	}
	return 0
}

func (x *MasterProduct) GetRW_DescForLabel() string {
	if x != nil {
		return x.RW_DescForLabel
	}
	return ""
}

func (x *MasterProduct) GetRW_DisplayName() string {
	if x != nil {
		return x.RW_DisplayName
	}
	return ""
}

func (x *MasterProduct) GetRWProductname() string {
	if x != nil {
		return x.RWProductname
	}
	return ""
}

func (x *MasterProduct) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *MasterProduct) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *MasterProduct) GetDeletedBy() string {
	if x != nil {
		return x.DeletedBy
	}
	return ""
}

func (x *MasterProduct) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

var File_product_product_proto protoreflect.FileDescriptor

var file_product_product_proto_rawDesc = string([]byte{
	0x0a, 0x15, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x35, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x73, 0x22, 0x6a, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x32, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x4d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x6b, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x74, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x43, 0x61, 0x72, 0x74, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xc1, 0x03, 0x0a, 0x0b, 0x43, 0x61, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x12, 0x11, 0x0a, 0x04, 0x4b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x4b, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x4b, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4b, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x4b, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x4b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x26, 0x0a, 0x0f, 0x4b, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4b, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x14, 0x4b, 0x5f, 0x73, 0x68, 0x65,
	0x6c, 0x66, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x4b, 0x53, 0x68, 0x65, 0x6c, 0x66, 0x4c, 0x69, 0x66,
	0x65, 0x49, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x4b, 0x5f, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0d, 0x4b, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x23, 0x0a, 0x0e, 0x4b, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6b,
	0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x4b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x50,
	0x65, 0x72, 0x4b, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x4b, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x4b, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x20, 0x0a, 0x0c, 0x4b, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x4b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x4b, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x4b, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x22, 0x0a, 0x0d, 0x4b, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x67,
	0x6d, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x4b, 0x50, 0x72, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x47, 0x6d, 0x12, 0x2f, 0x0a, 0x15, 0x4b, 0x5f, 0x76, 0x65, 0x67, 0x5f, 0x6e, 0x6f,
	0x6e, 0x5f, 0x76, 0x65, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x4b, 0x56, 0x65, 0x67, 0x4e, 0x6f, 0x6e, 0x56, 0x65, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x64, 0x22, 0xd4, 0x08, 0x0a, 0x0d, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x11, 0x0a, 0x04, 0x4b, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x4b, 0x5f,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x4b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x4b, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x4b, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x24, 0x0a, 0x0e, 0x4b, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4b, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x4b, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4b, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x4b, 0x5f,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x4b, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x2e, 0x0a, 0x14, 0x4b, 0x5f, 0x73,
	0x68, 0x65, 0x6c, 0x66, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x79,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x4b, 0x53, 0x68, 0x65, 0x6c, 0x66, 0x4c,
	0x69, 0x66, 0x65, 0x49, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x12, 0x2f, 0x0a, 0x15, 0x4b, 0x5f, 0x76,
	0x65, 0x67, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x76, 0x65, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x4b, 0x56, 0x65, 0x67, 0x4e, 0x6f,
	0x6e, 0x56, 0x65, 0x67, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x4b, 0x5f,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0d, 0x4b, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x4b, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x4b, 0x52, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0e, 0x4b, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6b, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x4b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x50, 0x65, 0x72, 0x4b, 0x67, 0x12, 0x2c,
	0x0a, 0x12, 0x4b, 0x5f, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x4b, 0x41, 0x6c, 0x6c,
	0x65, 0x72, 0x67, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0d,
	0x4b, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x67, 0x6d, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x4b, 0x50, 0x72, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x47, 0x6d,
	0x12, 0x25, 0x0a, 0x0f, 0x4b, 0x5f, 0x70, 0x69, 0x65, 0x63, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x6b, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x4b, 0x50, 0x69, 0x65, 0x63,
	0x65, 0x73, 0x50, 0x65, 0x72, 0x4b, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x4b, 0x5f, 0x69, 0x6e, 0x67,
	0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x4b, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x4b, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07,
	0x4b, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x4b, 0x5f, 0x76, 0x69, 0x65,
	0x77, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x4b, 0x56, 0x69, 0x65, 0x77, 0x73,
	0x12, 0x13, 0x0a, 0x05, 0x4b, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4b, 0x54, 0x61, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x4b, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x4b, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a,
	0x0e, 0x4b, 0x5f, 0x69, 0x73, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x4b, 0x49, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x4b, 0x5f, 0x6f, 0x63, 0x63, 0x61, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x15, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x4b, 0x4f, 0x63, 0x63, 0x61, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x52, 0x57, 0x5f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x52, 0x57, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x52, 0x57, 0x5f, 0x44, 0x65, 0x73, 0x63,
	0x46, 0x6f, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x52, 0x57, 0x44, 0x65, 0x73, 0x63, 0x46, 0x6f, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x25,
	0x0a, 0x0e, 0x52, 0x57, 0x5f, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x52, 0x57, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x52, 0x57, 0x5f, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x52,
	0x57, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x12, 0x39, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x32, 0xaf, 0x01, 0x0a,
	0x0e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x4a, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x1b,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x43, 0x61, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x1b,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x74, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x34,
	0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x68, 0x61,
	0x6e, 0x74, 0x61, 0x6e, 0x75, 0x32, 0x30, 0x30, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2d,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_product_product_proto_rawDescOnce sync.Once
	file_product_product_proto_rawDescData []byte
)

func file_product_product_proto_rawDescGZIP() []byte {
	file_product_product_proto_rawDescOnce.Do(func() {
		file_product_product_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_product_product_proto_rawDesc), len(file_product_product_proto_rawDesc)))
	})
	return file_product_product_proto_rawDescData
}

var file_product_product_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_product_product_proto_goTypes = []any{
	(*GetProductsRequest)(nil),     // 0: product.GetProductsRequest
	(*GetProductsResponse)(nil),    // 1: product.GetProductsResponse
	(*GetCartProductResponse)(nil), // 2: product.GetCartProductResponse
	(*CartProduct)(nil),            // 3: product.CartProduct
	(*MasterProduct)(nil),          // 4: product.MasterProduct
	(*timestamppb.Timestamp)(nil),  // 5: google.protobuf.Timestamp
}
var file_product_product_proto_depIdxs = []int32{
	4, // 0: product.GetProductsResponse.products:type_name -> product.MasterProduct
	3, // 1: product.GetCartProductResponse.products:type_name -> product.CartProduct
	5, // 2: product.MasterProduct.created_at:type_name -> google.protobuf.Timestamp
	5, // 3: product.MasterProduct.updated_at:type_name -> google.protobuf.Timestamp
	5, // 4: product.MasterProduct.deleted_at:type_name -> google.protobuf.Timestamp
	0, // 5: product.ProductService.GetProducts:input_type -> product.GetProductsRequest
	0, // 6: product.ProductService.GetCartProducts:input_type -> product.GetProductsRequest
	1, // 7: product.ProductService.GetProducts:output_type -> product.GetProductsResponse
	2, // 8: product.ProductService.GetCartProducts:output_type -> product.GetCartProductResponse
	7, // [7:9] is the sub-list for method output_type
	5, // [5:7] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_product_product_proto_init() }
func file_product_product_proto_init() {
	if File_product_product_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_product_product_proto_rawDesc), len(file_product_product_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_product_product_proto_goTypes,
		DependencyIndexes: file_product_product_proto_depIdxs,
		MessageInfos:      file_product_product_proto_msgTypes,
	}.Build()
	File_product_product_proto = out.File
	file_product_product_proto_goTypes = nil
	file_product_product_proto_depIdxs = nil
}
