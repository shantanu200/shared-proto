// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: order/order.proto

package order

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrderServiceClient is the client API for OrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderServiceClient interface {
	GetOrderByID(ctx context.Context, in *OrderReq, opts ...grpc.CallOption) (*Order, error)
	GetRefundTotalAmount(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*RefundTotalAmount, error)
	GetRefundRate(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*RefundRate, error)
	GetRefundSuccessRate(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*RefundSuccessRate, error)
	GetAvgRefundProcessingTime(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*AvgRefundProcessingTime, error)
	GetRefundsByProduct(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*RefundsByProduct, error)
	GetRefundStores(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*RefundStores, error)
	GetTotalRevenue(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (*TotalRevenueResponse, error)
	GetStoreRevenue(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (*StoreRevenueResponse, error)
	GetCompletedOrderCount(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (*CompletedOrderCountResponse, error)
	GetOrderTypeRevenue(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (*OrderTypeRevenueResponse, error)
	GetTaxBreakdown(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (*TaxBreakdownResponse, error)
	GetAverageOrderValue(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (*AverageOrderValueResponse, error)
	GetSalesTrend(ctx context.Context, in *SalesTrendRequest, opts ...grpc.CallOption) (*SalesTrendResponse, error)
	GetDiscountTotalAmount(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*DiscountAmount, error)
	GetOrderStatusDistribution(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (*OrderStatusDistributionResponse, error)
	GetAverageDeliveryTime(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (*AverageDeliveryTimeResponse, error)
	GetCartRate(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (*CartRateResponse, error)
	GetOrdersPerStore(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (*OrdersPerStoreResponse, error)
	GetAverageItemsPerOrder(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (*AverageItemsPerOrderResponse, error)
	GetPaymentStatusDistribution(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (*PaymentStatusDistributionResponse, error)
	GetDeliveryStatusDistribution(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (*DeliveryStatusDistributionResponse, error)
	GetOrdersByRegion(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (*OrdersByRegionResponse, error)
	GetPeakOrderTimes(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (*PeakOrderTimesResponse, error)
}

type orderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderServiceClient(cc grpc.ClientConnInterface) OrderServiceClient {
	return &orderServiceClient{cc}
}

func (c *orderServiceClient) GetOrderByID(ctx context.Context, in *OrderReq, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := c.cc.Invoke(ctx, "/order.OrderService/GetOrderByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetRefundTotalAmount(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*RefundTotalAmount, error) {
	out := new(RefundTotalAmount)
	err := c.cc.Invoke(ctx, "/order.OrderService/GetRefundTotalAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetRefundRate(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*RefundRate, error) {
	out := new(RefundRate)
	err := c.cc.Invoke(ctx, "/order.OrderService/GetRefundRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetRefundSuccessRate(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*RefundSuccessRate, error) {
	out := new(RefundSuccessRate)
	err := c.cc.Invoke(ctx, "/order.OrderService/GetRefundSuccessRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetAvgRefundProcessingTime(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*AvgRefundProcessingTime, error) {
	out := new(AvgRefundProcessingTime)
	err := c.cc.Invoke(ctx, "/order.OrderService/GetAvgRefundProcessingTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetRefundsByProduct(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*RefundsByProduct, error) {
	out := new(RefundsByProduct)
	err := c.cc.Invoke(ctx, "/order.OrderService/GetRefundsByProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetRefundStores(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*RefundStores, error) {
	out := new(RefundStores)
	err := c.cc.Invoke(ctx, "/order.OrderService/GetRefundStores", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetTotalRevenue(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (*TotalRevenueResponse, error) {
	out := new(TotalRevenueResponse)
	err := c.cc.Invoke(ctx, "/order.OrderService/GetTotalRevenue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetStoreRevenue(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (*StoreRevenueResponse, error) {
	out := new(StoreRevenueResponse)
	err := c.cc.Invoke(ctx, "/order.OrderService/GetStoreRevenue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetCompletedOrderCount(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (*CompletedOrderCountResponse, error) {
	out := new(CompletedOrderCountResponse)
	err := c.cc.Invoke(ctx, "/order.OrderService/GetCompletedOrderCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetOrderTypeRevenue(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (*OrderTypeRevenueResponse, error) {
	out := new(OrderTypeRevenueResponse)
	err := c.cc.Invoke(ctx, "/order.OrderService/GetOrderTypeRevenue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetTaxBreakdown(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (*TaxBreakdownResponse, error) {
	out := new(TaxBreakdownResponse)
	err := c.cc.Invoke(ctx, "/order.OrderService/GetTaxBreakdown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetAverageOrderValue(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (*AverageOrderValueResponse, error) {
	out := new(AverageOrderValueResponse)
	err := c.cc.Invoke(ctx, "/order.OrderService/GetAverageOrderValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetSalesTrend(ctx context.Context, in *SalesTrendRequest, opts ...grpc.CallOption) (*SalesTrendResponse, error) {
	out := new(SalesTrendResponse)
	err := c.cc.Invoke(ctx, "/order.OrderService/GetSalesTrend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetDiscountTotalAmount(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*DiscountAmount, error) {
	out := new(DiscountAmount)
	err := c.cc.Invoke(ctx, "/order.OrderService/GetDiscountTotalAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetOrderStatusDistribution(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (*OrderStatusDistributionResponse, error) {
	out := new(OrderStatusDistributionResponse)
	err := c.cc.Invoke(ctx, "/order.OrderService/GetOrderStatusDistribution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetAverageDeliveryTime(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (*AverageDeliveryTimeResponse, error) {
	out := new(AverageDeliveryTimeResponse)
	err := c.cc.Invoke(ctx, "/order.OrderService/GetAverageDeliveryTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetCartRate(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (*CartRateResponse, error) {
	out := new(CartRateResponse)
	err := c.cc.Invoke(ctx, "/order.OrderService/GetCartRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetOrdersPerStore(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (*OrdersPerStoreResponse, error) {
	out := new(OrdersPerStoreResponse)
	err := c.cc.Invoke(ctx, "/order.OrderService/GetOrdersPerStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetAverageItemsPerOrder(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (*AverageItemsPerOrderResponse, error) {
	out := new(AverageItemsPerOrderResponse)
	err := c.cc.Invoke(ctx, "/order.OrderService/GetAverageItemsPerOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetPaymentStatusDistribution(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (*PaymentStatusDistributionResponse, error) {
	out := new(PaymentStatusDistributionResponse)
	err := c.cc.Invoke(ctx, "/order.OrderService/GetPaymentStatusDistribution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetDeliveryStatusDistribution(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (*DeliveryStatusDistributionResponse, error) {
	out := new(DeliveryStatusDistributionResponse)
	err := c.cc.Invoke(ctx, "/order.OrderService/GetDeliveryStatusDistribution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetOrdersByRegion(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (*OrdersByRegionResponse, error) {
	out := new(OrdersByRegionResponse)
	err := c.cc.Invoke(ctx, "/order.OrderService/GetOrdersByRegion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetPeakOrderTimes(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (*PeakOrderTimesResponse, error) {
	out := new(PeakOrderTimesResponse)
	err := c.cc.Invoke(ctx, "/order.OrderService/GetPeakOrderTimes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderServiceServer is the server API for OrderService service.
// All implementations must embed UnimplementedOrderServiceServer
// for forward compatibility
type OrderServiceServer interface {
	GetOrderByID(context.Context, *OrderReq) (*Order, error)
	GetRefundTotalAmount(context.Context, *EmptyReq) (*RefundTotalAmount, error)
	GetRefundRate(context.Context, *EmptyReq) (*RefundRate, error)
	GetRefundSuccessRate(context.Context, *EmptyReq) (*RefundSuccessRate, error)
	GetAvgRefundProcessingTime(context.Context, *EmptyReq) (*AvgRefundProcessingTime, error)
	GetRefundsByProduct(context.Context, *EmptyReq) (*RefundsByProduct, error)
	GetRefundStores(context.Context, *EmptyReq) (*RefundStores, error)
	GetTotalRevenue(context.Context, *DateRangeRequest) (*TotalRevenueResponse, error)
	GetStoreRevenue(context.Context, *DateRangeRequest) (*StoreRevenueResponse, error)
	GetCompletedOrderCount(context.Context, *DateRangeRequest) (*CompletedOrderCountResponse, error)
	GetOrderTypeRevenue(context.Context, *DateRangeRequest) (*OrderTypeRevenueResponse, error)
	GetTaxBreakdown(context.Context, *DateRangeRequest) (*TaxBreakdownResponse, error)
	GetAverageOrderValue(context.Context, *DateRangeRequest) (*AverageOrderValueResponse, error)
	GetSalesTrend(context.Context, *SalesTrendRequest) (*SalesTrendResponse, error)
	GetDiscountTotalAmount(context.Context, *EmptyReq) (*DiscountAmount, error)
	GetOrderStatusDistribution(context.Context, *DateRangeRequest) (*OrderStatusDistributionResponse, error)
	GetAverageDeliveryTime(context.Context, *DateRangeRequest) (*AverageDeliveryTimeResponse, error)
	GetCartRate(context.Context, *DateRangeRequest) (*CartRateResponse, error)
	GetOrdersPerStore(context.Context, *DateRangeRequest) (*OrdersPerStoreResponse, error)
	GetAverageItemsPerOrder(context.Context, *DateRangeRequest) (*AverageItemsPerOrderResponse, error)
	GetPaymentStatusDistribution(context.Context, *DateRangeRequest) (*PaymentStatusDistributionResponse, error)
	GetDeliveryStatusDistribution(context.Context, *DateRangeRequest) (*DeliveryStatusDistributionResponse, error)
	GetOrdersByRegion(context.Context, *DateRangeRequest) (*OrdersByRegionResponse, error)
	GetPeakOrderTimes(context.Context, *DateRangeRequest) (*PeakOrderTimesResponse, error)
	mustEmbedUnimplementedOrderServiceServer()
}

// UnimplementedOrderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrderServiceServer struct {
}

func (UnimplementedOrderServiceServer) GetOrderByID(context.Context, *OrderReq) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderByID not implemented")
}
func (UnimplementedOrderServiceServer) GetRefundTotalAmount(context.Context, *EmptyReq) (*RefundTotalAmount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRefundTotalAmount not implemented")
}
func (UnimplementedOrderServiceServer) GetRefundRate(context.Context, *EmptyReq) (*RefundRate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRefundRate not implemented")
}
func (UnimplementedOrderServiceServer) GetRefundSuccessRate(context.Context, *EmptyReq) (*RefundSuccessRate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRefundSuccessRate not implemented")
}
func (UnimplementedOrderServiceServer) GetAvgRefundProcessingTime(context.Context, *EmptyReq) (*AvgRefundProcessingTime, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvgRefundProcessingTime not implemented")
}
func (UnimplementedOrderServiceServer) GetRefundsByProduct(context.Context, *EmptyReq) (*RefundsByProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRefundsByProduct not implemented")
}
func (UnimplementedOrderServiceServer) GetRefundStores(context.Context, *EmptyReq) (*RefundStores, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRefundStores not implemented")
}
func (UnimplementedOrderServiceServer) GetTotalRevenue(context.Context, *DateRangeRequest) (*TotalRevenueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalRevenue not implemented")
}
func (UnimplementedOrderServiceServer) GetStoreRevenue(context.Context, *DateRangeRequest) (*StoreRevenueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoreRevenue not implemented")
}
func (UnimplementedOrderServiceServer) GetCompletedOrderCount(context.Context, *DateRangeRequest) (*CompletedOrderCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompletedOrderCount not implemented")
}
func (UnimplementedOrderServiceServer) GetOrderTypeRevenue(context.Context, *DateRangeRequest) (*OrderTypeRevenueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderTypeRevenue not implemented")
}
func (UnimplementedOrderServiceServer) GetTaxBreakdown(context.Context, *DateRangeRequest) (*TaxBreakdownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaxBreakdown not implemented")
}
func (UnimplementedOrderServiceServer) GetAverageOrderValue(context.Context, *DateRangeRequest) (*AverageOrderValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAverageOrderValue not implemented")
}
func (UnimplementedOrderServiceServer) GetSalesTrend(context.Context, *SalesTrendRequest) (*SalesTrendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSalesTrend not implemented")
}
func (UnimplementedOrderServiceServer) GetDiscountTotalAmount(context.Context, *EmptyReq) (*DiscountAmount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiscountTotalAmount not implemented")
}
func (UnimplementedOrderServiceServer) GetOrderStatusDistribution(context.Context, *DateRangeRequest) (*OrderStatusDistributionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderStatusDistribution not implemented")
}
func (UnimplementedOrderServiceServer) GetAverageDeliveryTime(context.Context, *DateRangeRequest) (*AverageDeliveryTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAverageDeliveryTime not implemented")
}
func (UnimplementedOrderServiceServer) GetCartRate(context.Context, *DateRangeRequest) (*CartRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCartRate not implemented")
}
func (UnimplementedOrderServiceServer) GetOrdersPerStore(context.Context, *DateRangeRequest) (*OrdersPerStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrdersPerStore not implemented")
}
func (UnimplementedOrderServiceServer) GetAverageItemsPerOrder(context.Context, *DateRangeRequest) (*AverageItemsPerOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAverageItemsPerOrder not implemented")
}
func (UnimplementedOrderServiceServer) GetPaymentStatusDistribution(context.Context, *DateRangeRequest) (*PaymentStatusDistributionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentStatusDistribution not implemented")
}
func (UnimplementedOrderServiceServer) GetDeliveryStatusDistribution(context.Context, *DateRangeRequest) (*DeliveryStatusDistributionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeliveryStatusDistribution not implemented")
}
func (UnimplementedOrderServiceServer) GetOrdersByRegion(context.Context, *DateRangeRequest) (*OrdersByRegionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrdersByRegion not implemented")
}
func (UnimplementedOrderServiceServer) GetPeakOrderTimes(context.Context, *DateRangeRequest) (*PeakOrderTimesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPeakOrderTimes not implemented")
}
func (UnimplementedOrderServiceServer) mustEmbedUnimplementedOrderServiceServer() {}

// UnsafeOrderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderServiceServer will
// result in compilation errors.
type UnsafeOrderServiceServer interface {
	mustEmbedUnimplementedOrderServiceServer()
}

func RegisterOrderServiceServer(s grpc.ServiceRegistrar, srv OrderServiceServer) {
	s.RegisterService(&OrderService_ServiceDesc, srv)
}

func _OrderService_GetOrderByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetOrderByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/GetOrderByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetOrderByID(ctx, req.(*OrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetRefundTotalAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetRefundTotalAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/GetRefundTotalAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetRefundTotalAmount(ctx, req.(*EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetRefundRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetRefundRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/GetRefundRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetRefundRate(ctx, req.(*EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetRefundSuccessRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetRefundSuccessRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/GetRefundSuccessRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetRefundSuccessRate(ctx, req.(*EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetAvgRefundProcessingTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetAvgRefundProcessingTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/GetAvgRefundProcessingTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetAvgRefundProcessingTime(ctx, req.(*EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetRefundsByProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetRefundsByProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/GetRefundsByProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetRefundsByProduct(ctx, req.(*EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetRefundStores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetRefundStores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/GetRefundStores",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetRefundStores(ctx, req.(*EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetTotalRevenue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DateRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetTotalRevenue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/GetTotalRevenue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetTotalRevenue(ctx, req.(*DateRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetStoreRevenue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DateRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetStoreRevenue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/GetStoreRevenue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetStoreRevenue(ctx, req.(*DateRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetCompletedOrderCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DateRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetCompletedOrderCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/GetCompletedOrderCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetCompletedOrderCount(ctx, req.(*DateRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetOrderTypeRevenue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DateRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetOrderTypeRevenue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/GetOrderTypeRevenue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetOrderTypeRevenue(ctx, req.(*DateRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetTaxBreakdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DateRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetTaxBreakdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/GetTaxBreakdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetTaxBreakdown(ctx, req.(*DateRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetAverageOrderValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DateRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetAverageOrderValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/GetAverageOrderValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetAverageOrderValue(ctx, req.(*DateRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetSalesTrend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SalesTrendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetSalesTrend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/GetSalesTrend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetSalesTrend(ctx, req.(*SalesTrendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetDiscountTotalAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetDiscountTotalAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/GetDiscountTotalAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetDiscountTotalAmount(ctx, req.(*EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetOrderStatusDistribution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DateRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetOrderStatusDistribution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/GetOrderStatusDistribution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetOrderStatusDistribution(ctx, req.(*DateRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetAverageDeliveryTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DateRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetAverageDeliveryTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/GetAverageDeliveryTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetAverageDeliveryTime(ctx, req.(*DateRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetCartRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DateRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetCartRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/GetCartRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetCartRate(ctx, req.(*DateRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetOrdersPerStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DateRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetOrdersPerStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/GetOrdersPerStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetOrdersPerStore(ctx, req.(*DateRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetAverageItemsPerOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DateRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetAverageItemsPerOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/GetAverageItemsPerOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetAverageItemsPerOrder(ctx, req.(*DateRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetPaymentStatusDistribution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DateRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetPaymentStatusDistribution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/GetPaymentStatusDistribution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetPaymentStatusDistribution(ctx, req.(*DateRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetDeliveryStatusDistribution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DateRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetDeliveryStatusDistribution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/GetDeliveryStatusDistribution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetDeliveryStatusDistribution(ctx, req.(*DateRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetOrdersByRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DateRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetOrdersByRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/GetOrdersByRegion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetOrdersByRegion(ctx, req.(*DateRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetPeakOrderTimes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DateRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetPeakOrderTimes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/GetPeakOrderTimes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetPeakOrderTimes(ctx, req.(*DateRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderService_ServiceDesc is the grpc.ServiceDesc for OrderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order.OrderService",
	HandlerType: (*OrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOrderByID",
			Handler:    _OrderService_GetOrderByID_Handler,
		},
		{
			MethodName: "GetRefundTotalAmount",
			Handler:    _OrderService_GetRefundTotalAmount_Handler,
		},
		{
			MethodName: "GetRefundRate",
			Handler:    _OrderService_GetRefundRate_Handler,
		},
		{
			MethodName: "GetRefundSuccessRate",
			Handler:    _OrderService_GetRefundSuccessRate_Handler,
		},
		{
			MethodName: "GetAvgRefundProcessingTime",
			Handler:    _OrderService_GetAvgRefundProcessingTime_Handler,
		},
		{
			MethodName: "GetRefundsByProduct",
			Handler:    _OrderService_GetRefundsByProduct_Handler,
		},
		{
			MethodName: "GetRefundStores",
			Handler:    _OrderService_GetRefundStores_Handler,
		},
		{
			MethodName: "GetTotalRevenue",
			Handler:    _OrderService_GetTotalRevenue_Handler,
		},
		{
			MethodName: "GetStoreRevenue",
			Handler:    _OrderService_GetStoreRevenue_Handler,
		},
		{
			MethodName: "GetCompletedOrderCount",
			Handler:    _OrderService_GetCompletedOrderCount_Handler,
		},
		{
			MethodName: "GetOrderTypeRevenue",
			Handler:    _OrderService_GetOrderTypeRevenue_Handler,
		},
		{
			MethodName: "GetTaxBreakdown",
			Handler:    _OrderService_GetTaxBreakdown_Handler,
		},
		{
			MethodName: "GetAverageOrderValue",
			Handler:    _OrderService_GetAverageOrderValue_Handler,
		},
		{
			MethodName: "GetSalesTrend",
			Handler:    _OrderService_GetSalesTrend_Handler,
		},
		{
			MethodName: "GetDiscountTotalAmount",
			Handler:    _OrderService_GetDiscountTotalAmount_Handler,
		},
		{
			MethodName: "GetOrderStatusDistribution",
			Handler:    _OrderService_GetOrderStatusDistribution_Handler,
		},
		{
			MethodName: "GetAverageDeliveryTime",
			Handler:    _OrderService_GetAverageDeliveryTime_Handler,
		},
		{
			MethodName: "GetCartRate",
			Handler:    _OrderService_GetCartRate_Handler,
		},
		{
			MethodName: "GetOrdersPerStore",
			Handler:    _OrderService_GetOrdersPerStore_Handler,
		},
		{
			MethodName: "GetAverageItemsPerOrder",
			Handler:    _OrderService_GetAverageItemsPerOrder_Handler,
		},
		{
			MethodName: "GetPaymentStatusDistribution",
			Handler:    _OrderService_GetPaymentStatusDistribution_Handler,
		},
		{
			MethodName: "GetDeliveryStatusDistribution",
			Handler:    _OrderService_GetDeliveryStatusDistribution_Handler,
		},
		{
			MethodName: "GetOrdersByRegion",
			Handler:    _OrderService_GetOrdersByRegion_Handler,
		},
		{
			MethodName: "GetPeakOrderTimes",
			Handler:    _OrderService_GetPeakOrderTimes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order/order.proto",
}
