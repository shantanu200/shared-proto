// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: order/order.proto

package order

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OrderService_GetOrderByID_FullMethodName                  = "/order.OrderService/GetOrderByID"
	OrderService_GetRefundTotalAmount_FullMethodName          = "/order.OrderService/GetRefundTotalAmount"
	OrderService_GetRefundRate_FullMethodName                 = "/order.OrderService/GetRefundRate"
	OrderService_GetRefundSuccessRate_FullMethodName          = "/order.OrderService/GetRefundSuccessRate"
	OrderService_GetAvgRefundProcessingTime_FullMethodName    = "/order.OrderService/GetAvgRefundProcessingTime"
	OrderService_GetRefundsByProduct_FullMethodName           = "/order.OrderService/GetRefundsByProduct"
	OrderService_GetRefundStores_FullMethodName               = "/order.OrderService/GetRefundStores"
	OrderService_GetTotalRevenue_FullMethodName               = "/order.OrderService/GetTotalRevenue"
	OrderService_GetStoreRevenue_FullMethodName               = "/order.OrderService/GetStoreRevenue"
	OrderService_GetCompletedOrderCount_FullMethodName        = "/order.OrderService/GetCompletedOrderCount"
	OrderService_GetOrderTypeRevenue_FullMethodName           = "/order.OrderService/GetOrderTypeRevenue"
	OrderService_GetTaxBreakdown_FullMethodName               = "/order.OrderService/GetTaxBreakdown"
	OrderService_GetAverageOrderValue_FullMethodName          = "/order.OrderService/GetAverageOrderValue"
	OrderService_GetSalesTrend_FullMethodName                 = "/order.OrderService/GetSalesTrend"
	OrderService_GetDiscountTotalAmount_FullMethodName        = "/order.OrderService/GetDiscountTotalAmount"
	OrderService_GetOrderStatusDistribution_FullMethodName    = "/order.OrderService/GetOrderStatusDistribution"
	OrderService_GetAverageDeliveryTime_FullMethodName        = "/order.OrderService/GetAverageDeliveryTime"
	OrderService_GetCartRate_FullMethodName                   = "/order.OrderService/GetCartRate"
	OrderService_GetOrdersPerStore_FullMethodName             = "/order.OrderService/GetOrdersPerStore"
	OrderService_GetAverageItemsPerOrder_FullMethodName       = "/order.OrderService/GetAverageItemsPerOrder"
	OrderService_GetPaymentStatusDistribution_FullMethodName  = "/order.OrderService/GetPaymentStatusDistribution"
	OrderService_GetDeliveryStatusDistribution_FullMethodName = "/order.OrderService/GetDeliveryStatusDistribution"
	OrderService_GetOrdersByRegion_FullMethodName             = "/order.OrderService/GetOrdersByRegion"
	OrderService_GetPeakOrderTimes_FullMethodName             = "/order.OrderService/GetPeakOrderTimes"
	OrderService_GetRepeatCustomerRate_FullMethodName         = "/order.OrderService/GetRepeatCustomerRate"
	OrderService_GetCustomerLifetimeValue_FullMethodName      = "/order.OrderService/GetCustomerLifetimeValue"
	OrderService_GetCustomerOrderData_FullMethodName          = "/order.OrderService/GetCustomerOrderData"
	OrderService_GetStoreAnalytics_FullMethodName             = "/order.OrderService/GetStoreAnalytics"
)

// OrderServiceClient is the client API for OrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderServiceClient interface {
	GetOrderByID(ctx context.Context, in *OrderReq, opts ...grpc.CallOption) (*Order, error)
	GetRefundTotalAmount(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*RefundTotalAmount, error)
	GetRefundRate(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*RefundRate, error)
	GetRefundSuccessRate(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*RefundSuccessRate, error)
	GetAvgRefundProcessingTime(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*AvgRefundProcessingTime, error)
	GetRefundsByProduct(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*RefundsByProduct, error)
	GetRefundStores(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*RefundStores, error)
	GetTotalRevenue(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (*TotalRevenueResponse, error)
	GetStoreRevenue(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (*StoreRevenueResponse, error)
	GetCompletedOrderCount(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (*CompletedOrderCountResponse, error)
	GetOrderTypeRevenue(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (*OrderTypeRevenueResponse, error)
	GetTaxBreakdown(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (*TaxBreakdownResponse, error)
	GetAverageOrderValue(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (*AverageOrderValueResponse, error)
	GetSalesTrend(ctx context.Context, in *SalesTrendRequest, opts ...grpc.CallOption) (*SalesTrendResponse, error)
	GetDiscountTotalAmount(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*DiscountAmount, error)
	GetOrderStatusDistribution(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (*OrderStatusDistributionResponse, error)
	GetAverageDeliveryTime(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (*AverageDeliveryTimeResponse, error)
	GetCartRate(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (*CartRateResponse, error)
	GetOrdersPerStore(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (*OrdersPerStoreResponse, error)
	GetAverageItemsPerOrder(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (*AverageItemsPerOrderResponse, error)
	GetPaymentStatusDistribution(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (*PaymentStatusDistributionResponse, error)
	GetDeliveryStatusDistribution(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (*DeliveryStatusDistributionResponse, error)
	GetOrdersByRegion(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (*OrdersByRegionResponse, error)
	GetPeakOrderTimes(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (*PeakOrderTimesResponse, error)
	GetRepeatCustomerRate(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*RepeatCustomerRate, error)
	GetCustomerLifetimeValue(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*CustomerLifetimeValue, error)
	GetCustomerOrderData(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (*CustomerDataResponse, error)
	GetStoreAnalytics(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (*StoreAnalyticsResponse, error)
}

type orderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderServiceClient(cc grpc.ClientConnInterface) OrderServiceClient {
	return &orderServiceClient{cc}
}

func (c *orderServiceClient) GetOrderByID(ctx context.Context, in *OrderReq, opts ...grpc.CallOption) (*Order, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Order)
	err := c.cc.Invoke(ctx, OrderService_GetOrderByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetRefundTotalAmount(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*RefundTotalAmount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefundTotalAmount)
	err := c.cc.Invoke(ctx, OrderService_GetRefundTotalAmount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetRefundRate(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*RefundRate, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefundRate)
	err := c.cc.Invoke(ctx, OrderService_GetRefundRate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetRefundSuccessRate(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*RefundSuccessRate, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefundSuccessRate)
	err := c.cc.Invoke(ctx, OrderService_GetRefundSuccessRate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetAvgRefundProcessingTime(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*AvgRefundProcessingTime, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AvgRefundProcessingTime)
	err := c.cc.Invoke(ctx, OrderService_GetAvgRefundProcessingTime_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetRefundsByProduct(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*RefundsByProduct, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefundsByProduct)
	err := c.cc.Invoke(ctx, OrderService_GetRefundsByProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetRefundStores(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*RefundStores, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefundStores)
	err := c.cc.Invoke(ctx, OrderService_GetRefundStores_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetTotalRevenue(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (*TotalRevenueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TotalRevenueResponse)
	err := c.cc.Invoke(ctx, OrderService_GetTotalRevenue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetStoreRevenue(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (*StoreRevenueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StoreRevenueResponse)
	err := c.cc.Invoke(ctx, OrderService_GetStoreRevenue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetCompletedOrderCount(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (*CompletedOrderCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompletedOrderCountResponse)
	err := c.cc.Invoke(ctx, OrderService_GetCompletedOrderCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetOrderTypeRevenue(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (*OrderTypeRevenueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderTypeRevenueResponse)
	err := c.cc.Invoke(ctx, OrderService_GetOrderTypeRevenue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetTaxBreakdown(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (*TaxBreakdownResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaxBreakdownResponse)
	err := c.cc.Invoke(ctx, OrderService_GetTaxBreakdown_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetAverageOrderValue(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (*AverageOrderValueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AverageOrderValueResponse)
	err := c.cc.Invoke(ctx, OrderService_GetAverageOrderValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetSalesTrend(ctx context.Context, in *SalesTrendRequest, opts ...grpc.CallOption) (*SalesTrendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesTrendResponse)
	err := c.cc.Invoke(ctx, OrderService_GetSalesTrend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetDiscountTotalAmount(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*DiscountAmount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DiscountAmount)
	err := c.cc.Invoke(ctx, OrderService_GetDiscountTotalAmount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetOrderStatusDistribution(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (*OrderStatusDistributionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderStatusDistributionResponse)
	err := c.cc.Invoke(ctx, OrderService_GetOrderStatusDistribution_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetAverageDeliveryTime(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (*AverageDeliveryTimeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AverageDeliveryTimeResponse)
	err := c.cc.Invoke(ctx, OrderService_GetAverageDeliveryTime_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetCartRate(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (*CartRateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CartRateResponse)
	err := c.cc.Invoke(ctx, OrderService_GetCartRate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetOrdersPerStore(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (*OrdersPerStoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrdersPerStoreResponse)
	err := c.cc.Invoke(ctx, OrderService_GetOrdersPerStore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetAverageItemsPerOrder(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (*AverageItemsPerOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AverageItemsPerOrderResponse)
	err := c.cc.Invoke(ctx, OrderService_GetAverageItemsPerOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetPaymentStatusDistribution(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (*PaymentStatusDistributionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaymentStatusDistributionResponse)
	err := c.cc.Invoke(ctx, OrderService_GetPaymentStatusDistribution_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetDeliveryStatusDistribution(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (*DeliveryStatusDistributionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeliveryStatusDistributionResponse)
	err := c.cc.Invoke(ctx, OrderService_GetDeliveryStatusDistribution_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetOrdersByRegion(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (*OrdersByRegionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrdersByRegionResponse)
	err := c.cc.Invoke(ctx, OrderService_GetOrdersByRegion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetPeakOrderTimes(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (*PeakOrderTimesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PeakOrderTimesResponse)
	err := c.cc.Invoke(ctx, OrderService_GetPeakOrderTimes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetRepeatCustomerRate(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*RepeatCustomerRate, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RepeatCustomerRate)
	err := c.cc.Invoke(ctx, OrderService_GetRepeatCustomerRate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetCustomerLifetimeValue(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*CustomerLifetimeValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CustomerLifetimeValue)
	err := c.cc.Invoke(ctx, OrderService_GetCustomerLifetimeValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetCustomerOrderData(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (*CustomerDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CustomerDataResponse)
	err := c.cc.Invoke(ctx, OrderService_GetCustomerOrderData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetStoreAnalytics(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (*StoreAnalyticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StoreAnalyticsResponse)
	err := c.cc.Invoke(ctx, OrderService_GetStoreAnalytics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderServiceServer is the server API for OrderService service.
// All implementations must embed UnimplementedOrderServiceServer
// for forward compatibility.
type OrderServiceServer interface {
	GetOrderByID(context.Context, *OrderReq) (*Order, error)
	GetRefundTotalAmount(context.Context, *EmptyReq) (*RefundTotalAmount, error)
	GetRefundRate(context.Context, *EmptyReq) (*RefundRate, error)
	GetRefundSuccessRate(context.Context, *EmptyReq) (*RefundSuccessRate, error)
	GetAvgRefundProcessingTime(context.Context, *EmptyReq) (*AvgRefundProcessingTime, error)
	GetRefundsByProduct(context.Context, *EmptyReq) (*RefundsByProduct, error)
	GetRefundStores(context.Context, *EmptyReq) (*RefundStores, error)
	GetTotalRevenue(context.Context, *DateRangeRequest) (*TotalRevenueResponse, error)
	GetStoreRevenue(context.Context, *DateRangeRequest) (*StoreRevenueResponse, error)
	GetCompletedOrderCount(context.Context, *DateRangeRequest) (*CompletedOrderCountResponse, error)
	GetOrderTypeRevenue(context.Context, *DateRangeRequest) (*OrderTypeRevenueResponse, error)
	GetTaxBreakdown(context.Context, *DateRangeRequest) (*TaxBreakdownResponse, error)
	GetAverageOrderValue(context.Context, *DateRangeRequest) (*AverageOrderValueResponse, error)
	GetSalesTrend(context.Context, *SalesTrendRequest) (*SalesTrendResponse, error)
	GetDiscountTotalAmount(context.Context, *EmptyReq) (*DiscountAmount, error)
	GetOrderStatusDistribution(context.Context, *DateRangeRequest) (*OrderStatusDistributionResponse, error)
	GetAverageDeliveryTime(context.Context, *DateRangeRequest) (*AverageDeliveryTimeResponse, error)
	GetCartRate(context.Context, *DateRangeRequest) (*CartRateResponse, error)
	GetOrdersPerStore(context.Context, *DateRangeRequest) (*OrdersPerStoreResponse, error)
	GetAverageItemsPerOrder(context.Context, *DateRangeRequest) (*AverageItemsPerOrderResponse, error)
	GetPaymentStatusDistribution(context.Context, *DateRangeRequest) (*PaymentStatusDistributionResponse, error)
	GetDeliveryStatusDistribution(context.Context, *DateRangeRequest) (*DeliveryStatusDistributionResponse, error)
	GetOrdersByRegion(context.Context, *DateRangeRequest) (*OrdersByRegionResponse, error)
	GetPeakOrderTimes(context.Context, *DateRangeRequest) (*PeakOrderTimesResponse, error)
	GetRepeatCustomerRate(context.Context, *EmptyReq) (*RepeatCustomerRate, error)
	GetCustomerLifetimeValue(context.Context, *EmptyReq) (*CustomerLifetimeValue, error)
	GetCustomerOrderData(context.Context, *DateRangeRequest) (*CustomerDataResponse, error)
	GetStoreAnalytics(context.Context, *DateRangeRequest) (*StoreAnalyticsResponse, error)
	mustEmbedUnimplementedOrderServiceServer()
}

// UnimplementedOrderServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOrderServiceServer struct{}

func (UnimplementedOrderServiceServer) GetOrderByID(context.Context, *OrderReq) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderByID not implemented")
}
func (UnimplementedOrderServiceServer) GetRefundTotalAmount(context.Context, *EmptyReq) (*RefundTotalAmount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRefundTotalAmount not implemented")
}
func (UnimplementedOrderServiceServer) GetRefundRate(context.Context, *EmptyReq) (*RefundRate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRefundRate not implemented")
}
func (UnimplementedOrderServiceServer) GetRefundSuccessRate(context.Context, *EmptyReq) (*RefundSuccessRate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRefundSuccessRate not implemented")
}
func (UnimplementedOrderServiceServer) GetAvgRefundProcessingTime(context.Context, *EmptyReq) (*AvgRefundProcessingTime, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvgRefundProcessingTime not implemented")
}
func (UnimplementedOrderServiceServer) GetRefundsByProduct(context.Context, *EmptyReq) (*RefundsByProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRefundsByProduct not implemented")
}
func (UnimplementedOrderServiceServer) GetRefundStores(context.Context, *EmptyReq) (*RefundStores, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRefundStores not implemented")
}
func (UnimplementedOrderServiceServer) GetTotalRevenue(context.Context, *DateRangeRequest) (*TotalRevenueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalRevenue not implemented")
}
func (UnimplementedOrderServiceServer) GetStoreRevenue(context.Context, *DateRangeRequest) (*StoreRevenueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoreRevenue not implemented")
}
func (UnimplementedOrderServiceServer) GetCompletedOrderCount(context.Context, *DateRangeRequest) (*CompletedOrderCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompletedOrderCount not implemented")
}
func (UnimplementedOrderServiceServer) GetOrderTypeRevenue(context.Context, *DateRangeRequest) (*OrderTypeRevenueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderTypeRevenue not implemented")
}
func (UnimplementedOrderServiceServer) GetTaxBreakdown(context.Context, *DateRangeRequest) (*TaxBreakdownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaxBreakdown not implemented")
}
func (UnimplementedOrderServiceServer) GetAverageOrderValue(context.Context, *DateRangeRequest) (*AverageOrderValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAverageOrderValue not implemented")
}
func (UnimplementedOrderServiceServer) GetSalesTrend(context.Context, *SalesTrendRequest) (*SalesTrendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSalesTrend not implemented")
}
func (UnimplementedOrderServiceServer) GetDiscountTotalAmount(context.Context, *EmptyReq) (*DiscountAmount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiscountTotalAmount not implemented")
}
func (UnimplementedOrderServiceServer) GetOrderStatusDistribution(context.Context, *DateRangeRequest) (*OrderStatusDistributionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderStatusDistribution not implemented")
}
func (UnimplementedOrderServiceServer) GetAverageDeliveryTime(context.Context, *DateRangeRequest) (*AverageDeliveryTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAverageDeliveryTime not implemented")
}
func (UnimplementedOrderServiceServer) GetCartRate(context.Context, *DateRangeRequest) (*CartRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCartRate not implemented")
}
func (UnimplementedOrderServiceServer) GetOrdersPerStore(context.Context, *DateRangeRequest) (*OrdersPerStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrdersPerStore not implemented")
}
func (UnimplementedOrderServiceServer) GetAverageItemsPerOrder(context.Context, *DateRangeRequest) (*AverageItemsPerOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAverageItemsPerOrder not implemented")
}
func (UnimplementedOrderServiceServer) GetPaymentStatusDistribution(context.Context, *DateRangeRequest) (*PaymentStatusDistributionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentStatusDistribution not implemented")
}
func (UnimplementedOrderServiceServer) GetDeliveryStatusDistribution(context.Context, *DateRangeRequest) (*DeliveryStatusDistributionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeliveryStatusDistribution not implemented")
}
func (UnimplementedOrderServiceServer) GetOrdersByRegion(context.Context, *DateRangeRequest) (*OrdersByRegionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrdersByRegion not implemented")
}
func (UnimplementedOrderServiceServer) GetPeakOrderTimes(context.Context, *DateRangeRequest) (*PeakOrderTimesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPeakOrderTimes not implemented")
}
func (UnimplementedOrderServiceServer) GetRepeatCustomerRate(context.Context, *EmptyReq) (*RepeatCustomerRate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepeatCustomerRate not implemented")
}
func (UnimplementedOrderServiceServer) GetCustomerLifetimeValue(context.Context, *EmptyReq) (*CustomerLifetimeValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerLifetimeValue not implemented")
}
func (UnimplementedOrderServiceServer) GetCustomerOrderData(context.Context, *DateRangeRequest) (*CustomerDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerOrderData not implemented")
}
func (UnimplementedOrderServiceServer) GetStoreAnalytics(context.Context, *DateRangeRequest) (*StoreAnalyticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoreAnalytics not implemented")
}
func (UnimplementedOrderServiceServer) mustEmbedUnimplementedOrderServiceServer() {}
func (UnimplementedOrderServiceServer) testEmbeddedByValue()                      {}

// UnsafeOrderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderServiceServer will
// result in compilation errors.
type UnsafeOrderServiceServer interface {
	mustEmbedUnimplementedOrderServiceServer()
}

func RegisterOrderServiceServer(s grpc.ServiceRegistrar, srv OrderServiceServer) {
	// If the following call pancis, it indicates UnimplementedOrderServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OrderService_ServiceDesc, srv)
}

func _OrderService_GetOrderByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetOrderByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetOrderByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetOrderByID(ctx, req.(*OrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetRefundTotalAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetRefundTotalAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetRefundTotalAmount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetRefundTotalAmount(ctx, req.(*EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetRefundRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetRefundRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetRefundRate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetRefundRate(ctx, req.(*EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetRefundSuccessRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetRefundSuccessRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetRefundSuccessRate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetRefundSuccessRate(ctx, req.(*EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetAvgRefundProcessingTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetAvgRefundProcessingTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetAvgRefundProcessingTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetAvgRefundProcessingTime(ctx, req.(*EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetRefundsByProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetRefundsByProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetRefundsByProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetRefundsByProduct(ctx, req.(*EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetRefundStores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetRefundStores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetRefundStores_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetRefundStores(ctx, req.(*EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetTotalRevenue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DateRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetTotalRevenue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetTotalRevenue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetTotalRevenue(ctx, req.(*DateRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetStoreRevenue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DateRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetStoreRevenue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetStoreRevenue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetStoreRevenue(ctx, req.(*DateRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetCompletedOrderCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DateRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetCompletedOrderCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetCompletedOrderCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetCompletedOrderCount(ctx, req.(*DateRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetOrderTypeRevenue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DateRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetOrderTypeRevenue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetOrderTypeRevenue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetOrderTypeRevenue(ctx, req.(*DateRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetTaxBreakdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DateRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetTaxBreakdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetTaxBreakdown_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetTaxBreakdown(ctx, req.(*DateRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetAverageOrderValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DateRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetAverageOrderValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetAverageOrderValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetAverageOrderValue(ctx, req.(*DateRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetSalesTrend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SalesTrendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetSalesTrend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetSalesTrend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetSalesTrend(ctx, req.(*SalesTrendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetDiscountTotalAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetDiscountTotalAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetDiscountTotalAmount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetDiscountTotalAmount(ctx, req.(*EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetOrderStatusDistribution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DateRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetOrderStatusDistribution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetOrderStatusDistribution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetOrderStatusDistribution(ctx, req.(*DateRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetAverageDeliveryTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DateRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetAverageDeliveryTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetAverageDeliveryTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetAverageDeliveryTime(ctx, req.(*DateRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetCartRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DateRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetCartRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetCartRate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetCartRate(ctx, req.(*DateRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetOrdersPerStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DateRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetOrdersPerStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetOrdersPerStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetOrdersPerStore(ctx, req.(*DateRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetAverageItemsPerOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DateRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetAverageItemsPerOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetAverageItemsPerOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetAverageItemsPerOrder(ctx, req.(*DateRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetPaymentStatusDistribution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DateRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetPaymentStatusDistribution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetPaymentStatusDistribution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetPaymentStatusDistribution(ctx, req.(*DateRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetDeliveryStatusDistribution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DateRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetDeliveryStatusDistribution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetDeliveryStatusDistribution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetDeliveryStatusDistribution(ctx, req.(*DateRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetOrdersByRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DateRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetOrdersByRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetOrdersByRegion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetOrdersByRegion(ctx, req.(*DateRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetPeakOrderTimes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DateRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetPeakOrderTimes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetPeakOrderTimes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetPeakOrderTimes(ctx, req.(*DateRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetRepeatCustomerRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetRepeatCustomerRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetRepeatCustomerRate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetRepeatCustomerRate(ctx, req.(*EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetCustomerLifetimeValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetCustomerLifetimeValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetCustomerLifetimeValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetCustomerLifetimeValue(ctx, req.(*EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetCustomerOrderData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DateRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetCustomerOrderData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetCustomerOrderData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetCustomerOrderData(ctx, req.(*DateRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetStoreAnalytics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DateRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetStoreAnalytics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetStoreAnalytics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetStoreAnalytics(ctx, req.(*DateRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderService_ServiceDesc is the grpc.ServiceDesc for OrderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order.OrderService",
	HandlerType: (*OrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOrderByID",
			Handler:    _OrderService_GetOrderByID_Handler,
		},
		{
			MethodName: "GetRefundTotalAmount",
			Handler:    _OrderService_GetRefundTotalAmount_Handler,
		},
		{
			MethodName: "GetRefundRate",
			Handler:    _OrderService_GetRefundRate_Handler,
		},
		{
			MethodName: "GetRefundSuccessRate",
			Handler:    _OrderService_GetRefundSuccessRate_Handler,
		},
		{
			MethodName: "GetAvgRefundProcessingTime",
			Handler:    _OrderService_GetAvgRefundProcessingTime_Handler,
		},
		{
			MethodName: "GetRefundsByProduct",
			Handler:    _OrderService_GetRefundsByProduct_Handler,
		},
		{
			MethodName: "GetRefundStores",
			Handler:    _OrderService_GetRefundStores_Handler,
		},
		{
			MethodName: "GetTotalRevenue",
			Handler:    _OrderService_GetTotalRevenue_Handler,
		},
		{
			MethodName: "GetStoreRevenue",
			Handler:    _OrderService_GetStoreRevenue_Handler,
		},
		{
			MethodName: "GetCompletedOrderCount",
			Handler:    _OrderService_GetCompletedOrderCount_Handler,
		},
		{
			MethodName: "GetOrderTypeRevenue",
			Handler:    _OrderService_GetOrderTypeRevenue_Handler,
		},
		{
			MethodName: "GetTaxBreakdown",
			Handler:    _OrderService_GetTaxBreakdown_Handler,
		},
		{
			MethodName: "GetAverageOrderValue",
			Handler:    _OrderService_GetAverageOrderValue_Handler,
		},
		{
			MethodName: "GetSalesTrend",
			Handler:    _OrderService_GetSalesTrend_Handler,
		},
		{
			MethodName: "GetDiscountTotalAmount",
			Handler:    _OrderService_GetDiscountTotalAmount_Handler,
		},
		{
			MethodName: "GetOrderStatusDistribution",
			Handler:    _OrderService_GetOrderStatusDistribution_Handler,
		},
		{
			MethodName: "GetAverageDeliveryTime",
			Handler:    _OrderService_GetAverageDeliveryTime_Handler,
		},
		{
			MethodName: "GetCartRate",
			Handler:    _OrderService_GetCartRate_Handler,
		},
		{
			MethodName: "GetOrdersPerStore",
			Handler:    _OrderService_GetOrdersPerStore_Handler,
		},
		{
			MethodName: "GetAverageItemsPerOrder",
			Handler:    _OrderService_GetAverageItemsPerOrder_Handler,
		},
		{
			MethodName: "GetPaymentStatusDistribution",
			Handler:    _OrderService_GetPaymentStatusDistribution_Handler,
		},
		{
			MethodName: "GetDeliveryStatusDistribution",
			Handler:    _OrderService_GetDeliveryStatusDistribution_Handler,
		},
		{
			MethodName: "GetOrdersByRegion",
			Handler:    _OrderService_GetOrdersByRegion_Handler,
		},
		{
			MethodName: "GetPeakOrderTimes",
			Handler:    _OrderService_GetPeakOrderTimes_Handler,
		},
		{
			MethodName: "GetRepeatCustomerRate",
			Handler:    _OrderService_GetRepeatCustomerRate_Handler,
		},
		{
			MethodName: "GetCustomerLifetimeValue",
			Handler:    _OrderService_GetCustomerLifetimeValue_Handler,
		},
		{
			MethodName: "GetCustomerOrderData",
			Handler:    _OrderService_GetCustomerOrderData_Handler,
		},
		{
			MethodName: "GetStoreAnalytics",
			Handler:    _OrderService_GetStoreAnalytics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order/order.proto",
}
